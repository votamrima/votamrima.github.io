---
layout: single
title: "Node Maintenance Tasks"
subtitle: ""
date: 2025-03-16 08:15:00 +0100
background: '/image/01.jpg'
tags: ['kubernetes']
---

{% raw %}

This is the some note about the performing basic maintenance tasks in Kubernetes cluster. 

### Metrics Server

Metrics Server doesn't install on Kubernetes from the box. We need to install it seperately from the official github repository - https://github.com/kubernetes-sigs/metrics-server 

````bash
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
````

Once installation is finished, you can see that pod is running, but no container is up:

````bash
seymur@fedora40:~$ kubectl -n kube-system get pods
NAME                                            READY   STATUS    RESTARTS        AGE
.....
metrics-server-54bf7cdd6-8sr98                  0/1     Running   0               2m13s
````

Here you need to configure the Metric Server deployment to allow insecure tls. To solve this I edited the deployment:
````bash
kubectl -n kube-system edit deployments.apps metrics-server
````

and added ``--kubelet-insecure-tls`` parameter:

````bash
spec:
      containers:
      - args:
        - --kubelet-insecure-tls
````

After that the single container was run successfull.

To check if metrics server does what it should do, run the following command:

````bash
seymur@fedora40:~$ kubectl top pods
NAME                          CPU(cores)   MEMORY(bytes)   
mypod-kube-worker1.home.lab   0m           4Mi             
````

### Etcd Backup

Etcd is a database service of the Kubernetes
- etcd is a core Kubernetes service that contains all resources that have been created
- it is a static pod and is started by kubelet
- by losing etcd you lose all your cluster configuration

The backup of the etcd is able to proceed using etcdctl tool. This is the client of etcd database. Unfortunatelly, I couldn't download from repository, and I downloaded it from the official github repository to the first control node: 

````bash
wget https://github.com/etcd-io/etcd/releases/download/v3.5.19/etcd-v3.5.19-linux-amd64.tar.gz
````

By extracting the archive I used the utility easily. To test if etcdctl is able to communicate with server was run following commands:

````bash
[root@kube-master1 etcd-v3.5.19-linux-amd64]# ./etcdctl --endpoints=https://127.0.0.1:2379 --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key member list
10d8c2fc2b2b053c, started, kube-master3.home.lab, https://192.168.11.73:2380, https://192.168.11.73:2379, false
373f7e005da9deca, started, kube-master2.home.lab, https://192.168.11.72:2380, https://192.168.11.72:2379, false
aa70f81cf7c7bc59, started, kube-master1.home.lab, https://192.168.11.71:2380, https://192.168.11.71:2379, false
````

In this example the etcdctl tool lists the active etcd servers in the cluster.
To run the utility is required to add following parameters to the command:
``--etcd-servers=https://127.0.0.1:2379``
``--cacert /etc/kubernetes/pki/etcd/ca.crt`` 
``--cert /etc/kubernetes/pki/etcd/server.crt`` 
``--key /etc/kubernetes/pki/etcd/server.key``

The values for the parameters are able to find by running ``ps -aux | grep etcd`` command at control node. Additionally, the certificates are stored in ``/etc/kubernetes/pki/etcd/`` directory.

In the following example, the tool prints the prefixes of API keys of etcd. 

````bash
./etcdctl --endpoints=https://127.0.0.1:2379 --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key get / --prefix --keys-only 
````

The following command creates and saves the snapshot of etcd to a given file:

````bash
[root@kube-master1 etcd-v3.5.19-linux-amd64]# ./etcdctl --endpoints=https://127.0.0.1:2379 --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key snapshot save /opt/etcd-backups/etcd-backup1
{"level":"info","ts":"2025-03-16T18:02:37.760533+0100","caller":"snapshot/v3_snapshot.go:65","msg":"created temporary db file","path":"/opt/etcd-backups/etcd-backup1.part"}
{"level":"info","ts":"2025-03-16T18:02:37.772177+0100","logger":"client","caller":"v3@v3.5.19/maintenance.go:212","msg":"opened snapshot stream; downloading"}
{"level":"info","ts":"2025-03-16T18:02:37.772292+0100","caller":"snapshot/v3_snapshot.go:73","msg":"fetching snapshot","endpoint":"https://127.0.0.1:2379"}
{"level":"info","ts":"2025-03-16T18:02:39.263730+0100","logger":"client","caller":"v3@v3.5.19/maintenance.go:220","msg":"completed snapshot read; closing"}
{"level":"info","ts":"2025-03-16T18:02:39.412698+0100","caller":"snapshot/v3_snapshot.go:88","msg":"fetched snapshot","endpoint":"https://127.0.0.1:2379","size":"75 MB","took":"1 second ago"}
{"level":"info","ts":"2025-03-16T18:02:39.412999+0100","caller":"snapshot/v3_snapshot.go:97","msg":"saved","path":"/opt/etcd-backups/etcd-backup1"}
Snapshot saved at /opt/etcd-backups/etcd-backup1
[root@kube-master1 etcd-v3.5.19-linux-amd64]# ll -h /opt/etcd-backups/etcd-backup1 
-rw-------. 1 root root 72M Mar 16 18:02 /opt/etcd-backups/etcd-backup1
[root@kube-master1 etcd-v3.5.19-linux-amd64]# 
````

The following command prints some useful information about the created backup:

````bash
[root@kube-master1 etcd-v3.5.19-linux-amd64]# ./etcdctl --write-out=table snapshot status /opt/etcd-backups/etcd-backup1 
Deprecated: Use `etcdutl snapshot status` instead.

+----------+----------+------------+------------+
|   HASH   | REVISION | TOTAL KEYS | TOTAL SIZE |
+----------+----------+------------+------------+
| fc20d4f8 |  1452263 |      25104 |      75 MB |
+----------+----------+------------+------------+
````


````bash
````
````bash
````
````bash
````
````bash
````
````bash
````
````bash
````
````bash
````
````bash
````
````bash
````
````bash
````
````bash
````
````bash
````




{% endraw %}

